"""aÃ±adir campo rol a user

Revision ID: 4032281e33dc
Revises: 
Create Date: 2025-05-19 19:18:35.463187

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4032281e33dc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('professors')
    op.drop_table('reviews')
    op.drop_table('tutorships')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_name', table_name='users')
    op.drop_table('users')
    op.drop_table('professor_subjects')
    op.drop_table('payments')
    op.drop_table('subjects')
    op.drop_table('resources')
    op.drop_table('live_sessions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('live_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tutorship_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('session_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('whiteboard_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tutorship_id'], ['tutorships.id'], name='live_sessions_tutorship_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='live_sessions_pkey')
    )
    op.create_table('resources',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tutorship_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tutorship_id'], ['tutorships.id'], name='resources_tutorship_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='resources_pkey')
    )
    op.create_table('subjects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subjects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('level', postgresql.ENUM('primaria', 'secundaria', 'terciaria', name='subjectlevel'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='subjects_pkey'),
    sa.UniqueConstraint('name', name='subjects_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tutorship_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amount_usdt', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tutorship_id'], ['tutorships.id'], name='payments_tutorship_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey')
    )
    op.create_table('professor_subjects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('professor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['professor_id'], ['professors.id'], name='professor_subjects_professor_id_fkey'),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='professor_subjects_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='professor_subjects_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('alumno', 'docente', 'admin', 'moderador', name='userrole'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_name', 'users', ['name'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('tutorships',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tutorships_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('professor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'active', 'finished', 'canceled', name='tutorshipstatus'), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('price_usdt', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('platform_fee_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['professor_id'], ['professors.id'], name='tutorships_professor_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='tutorships_student_id_fkey'),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='tutorships_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tutorships_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('professor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tutorship_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['professor_id'], ['professors.id'], name='reviews_professor_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='reviews_student_id_fkey'),
    sa.ForeignKeyConstraint(['tutorship_id'], ['tutorships.id'], name='reviews_tutorship_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reviews_pkey')
    )
    op.create_table('professors',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('abstract', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('picture', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ranking', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['users.id'], name='professors_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='professors_pkey')
    )
    # ### end Alembic commands ###
